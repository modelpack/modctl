/*
 *     Copyright 2024 The CNAI Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.53.3. DO NOT EDIT.

package build

import (
	context "context"

	hooks "github.com/modelpack/modctl/pkg/backend/build/hooks"
	mock "github.com/stretchr/testify/mock"

	specs_gov1 "github.com/opencontainers/image-spec/specs-go/v1"

	v1 "github.com/modelpack/model-spec/specs-go/v1"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// BuildConfig provides a mock function with given fields: ctx, config, _a2
func (_m *Builder) BuildConfig(ctx context.Context, config v1.Model, _a2 hooks.Hooks) (specs_gov1.Descriptor, error) {
	ret := _m.Called(ctx, config, _a2)

	if len(ret) == 0 {
		panic("no return value specified for BuildConfig")
	}

	var r0 specs_gov1.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Model, hooks.Hooks) (specs_gov1.Descriptor, error)); ok {
		return rf(ctx, config, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.Model, hooks.Hooks) specs_gov1.Descriptor); ok {
		r0 = rf(ctx, config, _a2)
	} else {
		r0 = ret.Get(0).(specs_gov1.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.Model, hooks.Hooks) error); ok {
		r1 = rf(ctx, config, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_BuildConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildConfig'
type Builder_BuildConfig_Call struct {
	*mock.Call
}

// BuildConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - config v1.Model
//   - _a2 hooks.Hooks
func (_e *Builder_Expecter) BuildConfig(ctx interface{}, config interface{}, _a2 interface{}) *Builder_BuildConfig_Call {
	return &Builder_BuildConfig_Call{Call: _e.mock.On("BuildConfig", ctx, config, _a2)}
}

func (_c *Builder_BuildConfig_Call) Run(run func(ctx context.Context, config v1.Model, _a2 hooks.Hooks)) *Builder_BuildConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.Model), args[2].(hooks.Hooks))
	})
	return _c
}

func (_c *Builder_BuildConfig_Call) Return(_a0 specs_gov1.Descriptor, _a1 error) *Builder_BuildConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_BuildConfig_Call) RunAndReturn(run func(context.Context, v1.Model, hooks.Hooks) (specs_gov1.Descriptor, error)) *Builder_BuildConfig_Call {
	_c.Call.Return(run)
	return _c
}

// BuildLayer provides a mock function with given fields: ctx, mediaType, workDir, path, _a4
func (_m *Builder) BuildLayer(ctx context.Context, mediaType string, workDir string, path string, _a4 hooks.Hooks) (specs_gov1.Descriptor, error) {
	ret := _m.Called(ctx, mediaType, workDir, path, _a4)

	if len(ret) == 0 {
		panic("no return value specified for BuildLayer")
	}

	var r0 specs_gov1.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, hooks.Hooks) (specs_gov1.Descriptor, error)); ok {
		return rf(ctx, mediaType, workDir, path, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, hooks.Hooks) specs_gov1.Descriptor); ok {
		r0 = rf(ctx, mediaType, workDir, path, _a4)
	} else {
		r0 = ret.Get(0).(specs_gov1.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, hooks.Hooks) error); ok {
		r1 = rf(ctx, mediaType, workDir, path, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_BuildLayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildLayer'
type Builder_BuildLayer_Call struct {
	*mock.Call
}

// BuildLayer is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaType string
//   - workDir string
//   - path string
//   - _a4 hooks.Hooks
func (_e *Builder_Expecter) BuildLayer(ctx interface{}, mediaType interface{}, workDir interface{}, path interface{}, _a4 interface{}) *Builder_BuildLayer_Call {
	return &Builder_BuildLayer_Call{Call: _e.mock.On("BuildLayer", ctx, mediaType, workDir, path, _a4)}
}

func (_c *Builder_BuildLayer_Call) Run(run func(ctx context.Context, mediaType string, workDir string, path string, _a4 hooks.Hooks)) *Builder_BuildLayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(hooks.Hooks))
	})
	return _c
}

func (_c *Builder_BuildLayer_Call) Return(_a0 specs_gov1.Descriptor, _a1 error) *Builder_BuildLayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_BuildLayer_Call) RunAndReturn(run func(context.Context, string, string, string, hooks.Hooks) (specs_gov1.Descriptor, error)) *Builder_BuildLayer_Call {
	_c.Call.Return(run)
	return _c
}

// BuildManifest provides a mock function with given fields: ctx, layers, config, annotations, _a4
func (_m *Builder) BuildManifest(ctx context.Context, layers []specs_gov1.Descriptor, config specs_gov1.Descriptor, annotations map[string]string, _a4 hooks.Hooks) (specs_gov1.Descriptor, error) {
	ret := _m.Called(ctx, layers, config, annotations, _a4)

	if len(ret) == 0 {
		panic("no return value specified for BuildManifest")
	}

	var r0 specs_gov1.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []specs_gov1.Descriptor, specs_gov1.Descriptor, map[string]string, hooks.Hooks) (specs_gov1.Descriptor, error)); ok {
		return rf(ctx, layers, config, annotations, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []specs_gov1.Descriptor, specs_gov1.Descriptor, map[string]string, hooks.Hooks) specs_gov1.Descriptor); ok {
		r0 = rf(ctx, layers, config, annotations, _a4)
	} else {
		r0 = ret.Get(0).(specs_gov1.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []specs_gov1.Descriptor, specs_gov1.Descriptor, map[string]string, hooks.Hooks) error); ok {
		r1 = rf(ctx, layers, config, annotations, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_BuildManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildManifest'
type Builder_BuildManifest_Call struct {
	*mock.Call
}

// BuildManifest is a helper method to define mock.On call
//   - ctx context.Context
//   - layers []specs_gov1.Descriptor
//   - config specs_gov1.Descriptor
//   - annotations map[string]string
//   - _a4 hooks.Hooks
func (_e *Builder_Expecter) BuildManifest(ctx interface{}, layers interface{}, config interface{}, annotations interface{}, _a4 interface{}) *Builder_BuildManifest_Call {
	return &Builder_BuildManifest_Call{Call: _e.mock.On("BuildManifest", ctx, layers, config, annotations, _a4)}
}

func (_c *Builder_BuildManifest_Call) Run(run func(ctx context.Context, layers []specs_gov1.Descriptor, config specs_gov1.Descriptor, annotations map[string]string, _a4 hooks.Hooks)) *Builder_BuildManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]specs_gov1.Descriptor), args[2].(specs_gov1.Descriptor), args[3].(map[string]string), args[4].(hooks.Hooks))
	})
	return _c
}

func (_c *Builder_BuildManifest_Call) Return(_a0 specs_gov1.Descriptor, _a1 error) *Builder_BuildManifest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_BuildManifest_Call) RunAndReturn(run func(context.Context, []specs_gov1.Descriptor, specs_gov1.Descriptor, map[string]string, hooks.Hooks) (specs_gov1.Descriptor, error)) *Builder_BuildManifest_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
